


Clever readers might suspect that this function has a bug.  It looks like if the
last name is fewer than four characters long or the first name is fewer than
three characters long, the program would crash.  Surprisingly, in Python the
string range operator is very forgiving.  If you were to type the expression
`"abc"[0:20]`, the substring returned will still be `"abc"`.  We can read this
substring operation aloud as “Start at index 0 and return any characters up to
index 20, if it exists.”  Therefore, there is no bug, but skeptical thinking
like this will help us as we program in the future.

What happens when you switch the order of the arguments?

```python
print_email("Carrington", "Shania")
```

What happens if you do not have the correct number of arguments?

```python
print_email("Shania")
```

Try these things on your own to see what happens.  Try to guess what they do
before you actually run the code.  If they produce errors, make a mental note of
what the error looks like.  That way, if you encounter that error again in the
future, you'll know what caused it and how to fix it.

Let's move on to a different example.  Let us write code that defines a new function, and then let's write some code to call that new function (see Listing~\ref{code:print_money}).

\begin{codelisting}
\label{code:print_money}
\codecaption{Defining and calling \kode{print\_money}}
```python, options: "linenos": true
def print_money(amount):
    print("$%.2f" % amount)

my_money = 50.25
print_money(my_money)
```
\end{codelisting}

This code will print:

```console
$50.25
```

It does not matter when we give an argument to a function call if we provide a
value or an expression that returns a value (in this case, the name of a
variable).

Now, let’s make one more change to the code (see
Listing~\ref{code:print_money_change_var}).


\begin{codelisting}
\label{code:print_money_change_var}
\codecaption{Defining and calling \kode{print\_money}, attempt 2}
```python, options: "linenos": true, "hl_lines": [3,7]
def print_money(amount):
    print("$%.2f" % amount)
    amount = amount + 10.00

my_money = 50.25
print_money(my_money)
print_money(my_money)
```
\end{codelisting}

In this example, we are doing something new.  We are taking the parameter
`amount` and actually changing its value in the last statement of the function’s
body.  Where does `amount`’s value come from?  It is passed the value of
`my_money` down in the main program.  One thing we should look out for is “side
effects.”  Does changing the value of `amount` have any effect on the value of
`my_money`?  In other words, does changing `amount` also change `my_money`?  If
it did, we would expect the second call to `print_money` to print a different
value than the first.

As it turns out, when we run the code, we see this:

```console
$50.25
$50.25
```

Changing `amount` does not change `my_money`.  This is because arguments are
passed to parameters in Python using their value alone.  This is called *pass by
value*.  If changing the parameter had actually changed the argument, then we
would have said Python practices *pass by reference*, where a reference to the
original variable would have been given to the function rather than just the
value.  Remember that Python uses pass by value when you are writing function
definitions.

It is generally bad programming practice to change the values of parameter
variables in the body of a function -- again, generally speaking -- but there are
exceptions.  For the most part, a programmer should be able to consult the
parameters at any point in the function’s body to see what the “input” to the
function was.  There is one situation, however, where it is desirable to modify
the parameter values passed to a function.  We will discuss this situation in
Chapter~\ref{ch:lists}.

Terminology time!  The first line of a function definition is called the
function's *signature*.  The signature tells us the name of the function and how
many parameters it has.  For example, suppose we have the following function
signature.

```python
def print_uppercase(words):
    # function body omitted
```

We can see from this signature that if we want to call this function, we must
use the name `print_uppercase` and we must pass one argument to the function.
The argument will be assigned to the parameter `words`.

We will use the term signature again in this book, so you should learn to use
it, too!

## Return values
\label{sec:ret_vals}

If we think of functions in terms of them being like mini-programs, we might
observe that programs tend to ask for input, they doing something with the
input, and then finally they produce output.  In a sense, parameters give
programmers the ability to pass “input” to a function.  What then might we do to
allow functions to provide “output” back to the main program?

As you might recall, we have already seen functions that do this -- functions that
Python already has defined for us.  For example:

```python
ssn = input("Enter your social security number: ")
```

`input` is a function.  It allows the programmer to provide an argument, which
is the string to use for prompting the user.  We can imagine that somewhere,
some programmer has written a function definition for `input` that looks
something like this:

```python
def input(prompt):
    # Code that makes input work goes here.
```

Notice that the `input` function returns a value, which we then assign to a
variable.  In a function’s body, we can tell Python what value to return using
the `return` statement.  Let's start with an overly simple example so that we
understand the mechanics of the `return` keyword.  Suppose we define the
function shown in Listing~\ref{code:forty_two}.

\begin{codelisting}
\label{code:forty_two}
\codecaption{}
```python, options: "linenos": true
def favorite_number():
    return 42

number = favorite_number()
print(number)
```
\end{codelisting}

Whenever a `return` statement is encountered in a function’s body, the function
stops immediately and returns to where the function was called.  The value that
is returned from the function is whatever value was listed in the `return`
statement.  In Listing~\ref{code:forty_two}, there is only one statement in the
body of the `favorite_number` function: the return statement itself.

To interpret the code in Listing~\ref{code:forty_two}, we start at line 4, which
is the first line of the main program.  The `favorite_number` function is
called, so the program "jumps" up to `favorite_number`'s definition.  The
program enters the function's body and encounters the `return` statement.  The
`42` listed in the `return` statement causes the function to end, and the value
`42` is sent back to line 4.  Finally, line 4 can finish as the `42` is assigned
to the variable `number`.

Now, let's see how a function might take a parameter value and then return
something based on the parameter value.  To experiment with this, we will define
a function named `next_int` that takes an integer as a parameter.  Whatever
integer is given, the function will return the "next" integer.  If we give
`next_int` the value `3`, it will return `4`.  Said another way, `next_int(3) ==
4`.  If we give `next_int` the value `-2`, it will return `-1`.  Said another
way, `next_int(-2) == -1`.  We define `next_int` in Listing~\ref{code:next_int}.

\begin{codelisting}
\label{code:next_int}
\codecaption{Function definition for \kode{next\_int}}
```python, options: "linenos": true
def next_int(int_value):
    next_value = int_value + 1
    return next_value
```
\end{codelisting}

Now, let's call our function and print its resulting value:

```python
print(next_int(3))
print(next_int(-2))
```

which produces the following output:

```console
4
-1
```

Notice in `next_int`'s function body how we create a new variable named
`next_value`.  `next_value` holds the value we will return from our function.
There is no rule that says we must return the value of a variable.  Any
expression that produces a value can follow the `return` keyword.  In other
words, we could have simply returned `int_value + 1`, as shown in
Listing~\ref{code:next_int2}.

\begin{codelisting}
\label{code:next_int2}
\codecaption{Function definition for \kode{next\_int}}
```python, options: "linenos": true
def next_int(int_value):
    return int_value + 1
```
\end{codelisting}

Time to move on and look at a different example function.  Consider
Listing~\ref{code:pig_latin_word}.

\begin{codelisting}
\label{code:pig_latin_word}
\codecaption{Function definition for \kode{piglatin}}
```python, options: "linenos": true
def piglatin(english):
    if english[0] in "aeiou":
        return english + "-way"
    else:
        return english[1:] + "-" + english[0] + "ay"
```
\end{codelisting}

Whenever a `return` statement is encountered in a function’s body, the function
stops immediately and returns to where the function was called.  The value that
is returned from the function is whatever value is given to the return
statement.  Maybe you already understand this, but it bears repeating because it
is very important to understand this concept if you are going to be able to
understand functions.

In Listing~\ref{code:pig_latin_word}, we have a function named `piglatin`.  This
example comes from the exercises in Section~\ref{sec:loops_exercises} from
Chapter~\ref{ch:loops}.  We can pass to `piglatin` an English word, and for
simplicity’s sake, suppose the word always consists solely of lowercase letters.
We are only handling two cases for now: 1.) the word starts with a vowel, or 2.)
the word starts with a single consonant letter.

A function may have zero, one, or many return statements, but as soon as the
program encounters a return statement, the function ends and the value is
returned immediately.

How might we call this function?  There are several ways we could do it.

```python
engword = "apple"
pigword = piglatin(engword)
print("The pig latin of apple is %s." % pigword)

print("The pig latin of catalog is %s." % piglatin("catalog"))
```

Since `piglatin` returns a string, we can call `piglatin` anywhere we would
normally put a string.

It's hard for new programmers to learn to write their own functions.  It takes
practice.  It's helpful to see how to define a lot of example functions, and
it's also helpful to try writing your own functions and seeing what problems you
run into.  Let's take a look at a bunch of example functions, and at some point,
you should go back and try to define these functions on your own without looking
at the code.

Listing~\ref{code:get_area} is a function definition that, given the radius of a
circle, will return the area of the circle.

\begin{codelisting}
\label{code:get_area}
\codecaption{Function definition for \kode{get\_area}}
```python, options: "linenos": true
import math

def get_area(radius):
    return math.pi * radius * radius
```
\end{codelisting}

Listing~\ref{code:roll} is a function definition that simulates rolling a
6-sided die.

\begin{codelisting}
\label{code:roll}
\codecaption{Function definition for \kode{roll}}
```python, options: "linenos": true
import random

def roll():
    return random.randint(1, 6)
```
\end{codelisting}

Listing~\ref{code:posintsum} defines a function named `posintsum` that prints
the sum of the first `n` positive integers.  The listing also shows how you
might call this function.  For example, `posintsum(4)` would calculate the
result of `1+2+3+4` as `10`.  As another example, `posintsum(10)` would
calculate the result of `1+2+3+4+5+6+7+8+9+10` as `55`.  Note how we use a `for`
loop and a variable named `total` to accomplish this before returning the result
in `total`.

\begin{codelisting}
\label{code:posintsum}
\codecaption{Function definition and sample function calls for \kode{posintsum}}
```python, options: "linenos": true
def posintsum(n):
    total = 0
    for i in range(1, n+1):
        total += i
    return total

print("1+2+3+4 = %d" % posintsum(4))
print("1+2+3+4+5+6+7+8+9+10 = %d" % posintsum(10))
```
\end{codelisting}

What if we had forgotten the return statement at the end of the function?  In
other words, what if our function definition looked like
Listing~\ref{code:posintsum_missing_return}?

\begin{codelisting}
\label{code:posintsum_missing_return}
\codecaption{Forgotten \kode{return} statement in \kode{posintsum}}
```python, options: "linenos": true, "hl_lines": [5]
def posintsum(n):
    total = 0
    for i in range(1, n+1):
        total += i
    # Oh no! I need to remember to actually return total.
```
\end{codelisting}

As it turns out, all functions in Python return something no matter what.  If a
function does not have a `return` statement, the function will return a special
value known as `None`.  The type of the value `None` is `NoneType`.  You may
have already seen `None` if you got confused on the difference between `print`
and `input`, as many new programmers do.  Suppose we did the following.

```python
x = print("Enter a number: ")
# Oops.  x == None
```

Clearly, we meant to use `input` rather than `print`.  `print` returns `None`.

## Modularizing Code with Functions
\label{sec:func_mod}

Now that we can make “mini-programs” using functions, we can begin composing
full programs made out of mini-programs.  We will use functions to help organize
our code so that our code is easier to read and easier to maintain.  This will
also make it easier to cope with errors, particularly user error, as we will see
in the following example.  Let’s take an idea from the previous section and
suppose that we want to write a simple program that asks the user for a positive
integer `n`.  Our program should print out the sum of all positive integers up
through that `n`.  We will also want to only accept valid input, so we will need
to re-ask for input if what the user types is incorrect.  Examples of bad input
might be `23r5` (since there is a `r` in the number) or `-2` (since `-2` is
negative).

It is often difficult for novice programmers to know where to begin in writing a
program.  One very effective approach is to start by writing comments in English
that describe, step-by-step, what our program needs to do.  So, we might do
this.

```python
# Ask for a positive whole number 'n' (i.e., a positive integer).

# Compute the sum of 1 + 2 + ... + n and print it.
```

That’s a good start.  Now, let’s become "lazy" programmers.  Laziness is a good
thing in some situations, and this is one of those situations.  In fact, a
famous programmer named Larry Wall once stated that laziness is one of three
“virtues” that programmers should seek (look it up on the Web).

In order to be "lazy," we should pretend that someone has already defined
functions for us, and by calling these functions, our program will be done!

```python
# Ask for a positive whole number 'n' (i.e., a positive integer).
n = getposint()

# Compute the sum of 1 + 2 + ... + n and print it.
total = getsum(n)

print("The sum of the first %d positive whole numbers is %d."
       % (n, total))
```

Hooray!  We’ve written our program in three lines of actual code!  Well, we
haven’t really, but now we can focus on the “pieces” of the program by defining
the functions that will actually make this program work.  Let’s define
`getposint` first (see Listing~\ref{code:getposint}).

\begin{codelisting}
\label{code:getposint}
\codecaption{Function definition for \kode{getposint}}
```python, options: "linenos": true
def getposint():
    s = input("Enter a positive whole number: ")
    while not s.isdigit() and s != "0":
        print("Sorry, that does not look like a positive whole
               number.  Please try again.")
        s = input("Enter a positive whole number: ")
    return int(s)
```
\end{codelisting}

Now, let’s try to define `getsum` in Listing~\ref{code:getsum}.  Keep in mind
that `getsum` has a single argument, so it needs a single parameter, too.

\begin{codelisting}
\label{code:getsum}
\codecaption{Function definition for \kode{getsum}}
```python, options: "linenos": true
def getsum(n):
    total = 0
    for i in range(1, n+1):
        total += i
    return total
```
\end{codelisting}

Note that in line 3 of Listing~\ref{code:getsum} the second expression in
`range` is `n+1`.  Since we want to add up all the values from `1` to `n`, the
value that will make us leave the look is one more than `n`, that is, `n+1`.

Writing functions takes practice.  The more you try, the better you will get at
it.  A program with everything defined is shown in
Listing~\ref{code:compute_posintsum}.

\begin{codelisting}
\label{code:compute_posintsum}
\codecaption{Code composed with functions}
```python, options: "linenos": true
def getposint():
    s = input("Enter a positive whole number: ")
    while not s.isdigit() and s != "0":
        print("Sorry, that does not look like a positive whole
               number.  Please try again.")
        s = input("Enter a positive whole number: ")
    return int(s)

def getsum(n):
    total = 0
    for i in range(1, n+1):
        total += i
    return total


# Ask for a positive whole number 'n' (i.e., a positive integer).
n = getposint()

# Compute the sum of 1 + 2 + ... + n and print it.
total = getsum(n)

print("The sum of the first %d positive whole numbers is %d."
       % (n, total))
```
\end{codelisting}

Sometimes, programmers even like to put their main program code into its own
function.  That way, all of the code exists in some function.
Listing~\ref{code:compute_posintsum_final} shows how we would do this.

\begin{codelisting}
\label{code:compute_posintsum_final}
\codecaption{Code composed with functions, using \kode{main}}
```python, options: "linenos": true
def getposint():
    s = input("Enter a positive whole number: ")
    while not s.isdigit() and s != "0":
        print("Sorry, that does not look like a positive whole
               number.  Please try again.")
        s = input("Enter a positive whole number: ")
    return int(s)

def getsum(n):
    total = 0
    for i in range(1, n+1):
        total += i
    return total

def main():
    # Ask for a positive whole number 'n' (i.e., a positive integer).
    n = getposint()

    # Compute the sum of 1 + 2 + ... + n and print it.
    total = getsum(n)

    print("The sum of the first %d positive whole numbers is %d."
           % (n, total))

# Run the program by calling main().
main()
```
\end{codelisting}

Some other programming languages like C++ and Java actually require programs to
start by calling a function named `main`.  If we always put our main program
code into a function named `main`, it will ease our transition from Python to
other languages.

## Variable Scope
\label{sec:var_scope}

You may have noticed in the previous section that our programs are starting to
get longer in terms of number of lines of code (LOC).  As our programs get
longer, we will start to define more variables to help our programs do their
work.  Eventually, we will find that sometimes we can't access a variable in one
part of the program that is defined in another part of the program.  This is due
to *variable scope*.  The *scope* of a variable is the part of the code where
the variable can be accessed.  In terms of accessing a variable, we need to make
the distinction between *reading* a variable's value and *writing* to a
variable's value.  Reading a variable means using--but not modifying--its
current value.  Writing to a variable means modifying its value.  Consider the
following code.

```python
y = x + 1
```

In this code, we are *reading* from `x`.  We are *writing* to `y`.  When we say
*access* a variable's value, we mean the same thing as *reading* the variable.

Now, let's explore the notion of variable scope.  Consider the (non-working)
code in Listing~\ref{code:sumsq_no_init}.

\begin{codelisting}
\label{code:sumsq_no_init}
\codecaption{Sum of squares, with \kode{NameError}}
```python, options: "linenos": true
for k in range(1, 11):
    square = k * k
    total = total + square

print(total)
```
\end{codelisting}

The code in Listing~\ref{code:sumsq_no_init} is supposed to compute the sum of
squares, that is, $$1^2 + 2^2 + 3^2 + \dots + 10^2$$.  It computes each square's
value and adds it to a variable named `total`.  However, when we run the code,
we get the following error.

```console
Traceback (most recent call last):
  File "<stdin>", line 3, in <module>
NameError: name 'total' is not defined
```

Let's take a closer look at line 3.

```python
total = total + square
```

On the right-hand side (RHS) of the `=` in line 3, we are *reading* from both
`total` and `square`, and then adding their values together.  Since we did not
previously define `total`, it is not yet *in scope*.  The error produced in
Python is called a `NameError` because Python doesn't have information about a
variable named `total`.  To correct this problem, we must *initialize* `total`
with a starting value.  Initializing a variable means to create the variable by
giving it a starting value. Listing~\ref{code:sumsq} shows the corrected code.
Note that `total` is created prior to the start of the loop.

\begin{codelisting}
\label{code:sumsq}
\codecaption{Sum of squares, corrected}
```python, options: "linenos": true, "hl_lines": [1]
total = 0
for k in range(1, 11):
    square = k * k
    total = total + square

print(total)
```
\end{codelisting}

Always remember to initialize your variables.

Say it again: a variable's scope is the part of the program where the variable
may be accessed (i.e., "read").

We are bringing up the topic of variable scope in this chapter because variable
scope has particular relevance in functions. Suppose we were to write the code
in Listing~\ref{code:local_variable_bogus}.

\begin{codelisting}
\label{code:local_variable_bogus}
\codecaption{}
```python, options: "linenos": true
import math

def main():
    people = 10
    slices_per_pizza = 12
    slices_per_person = 3
    pizzas = number_of_pizzas()
    print("You need to order %d pizzas." % pizzas)

def number_of_pizzas():
    return math.ceil(people * slices_per_person / slices_per_pizza)

main()
```
\end{codelisting}

Take a gander at Listing~\ref{code:local_variable_bogus} and try to guess what might
happen?  Well, what do you think?  Try to come up with a few possibilities.  On
one hand, it might set the variables `people`, `slices_per_pizza`, and
`slices_per_person`, and then use them to calculate the number of pizzas one
needs to order.  Another possibility is that the program crashes hideously...
but why?

Try running this code on your own.  Of course, it ends up crashing.  This code
is a hot mess!  The error reads as follows.

```console
Traceback (most recent call last):
  File "test.py", line 13, in <module>
    main()
  File "test.py", line 7, in main
    pizzas = number_of_pizzas()
  File "test.py", line 11, in number_of_pizzas
    return math.ceil(people * slices_per_person / slices_per_pizza)
NameError: name 'people' is not defined
```

When the code reaches the `number_of_pizzas` function, it does not remember that
there is a variable named `people` that was defined in the `main` function.
That's interesting.  This suggests that when we define a variable within a
function's body, that variable is only visible within that function.

Think about it this way.  Functions are like little houses.  What happens in
your house is your business.  Other people shouldn't be able to see in your
house from within their house.

So, if we define a variable in one function, it only "lives" in that function.
This is a good thing!  It means that if you define a variable somewhere in your
program, a function you call can't mess with the variables you've already
defined.  If a function could mess with your variables without you being aware
of it, then your program could have unintended side effects.  If functions had
surprising side effects, it would be very difficult to reason through programs
and predict their behavior and output.  One of the great things about computers
is that they are logical and predictable.

A variable that is defined inside a function is called a *local variable*.  If
we define a variable in the body of a function, we say that the variable is
*local* to that function.  In this case, the variables `people`,
`slices_per_pizza`, and `slices_per_person` are local variables in `main`.

All right, let's fix the problem.  The best thing to do is to pass
these values to the `number_of_pizzas` function, which means we'll need
`number_of_pizzas` to have three parameters in its definition, as we can see in
the updated code found in Listing~\ref{code:local_variable_good}.

\begin{codelisting}
\label{code:local_variable_good}
\codecaption{}
```python, options: "linenos": true, "hl_lines": [4, 7]
import math

def main():
    pizzas = number_of_pizzas(10, 12, 3)
    print("You need to order %d pizzas." % pizzas)

def number_of_pizzas(people, slices_per_pizza, slices_per_person):
    return math.ceil(people * slices_per_person / slices_per_pizza)

main()
```
\end{codelisting}

Hey, this works splendidly!

Let's go back to the "houses" metaphor we presented a few paragraphs ago. Recall
that I asked you to think of functions as being like little houses.  What do you
think happens when you define a variable outside of all the "houses."  In other
words, what if I define a variable in what is normally the main part of the
program that exists outside of any function's body?  Consider
Listing~\ref{code:global_bogus}, where you'll notice we've done away with a
`main` function entirely.

\begin{codelisting}
\label{code:global_bogus}
\codecaption{}
```python, options: "linenos": true
balance = 10000

def withdraw(amount):
    if balance >= amount:
        balance =  balance - amount

withdraw(1000)
print(balance)
```
\end{codelisting}

If you run Listing~\ref{code:global_bogus}, you'll see there is a problem.
We'll resolve the problem shortly, however let's consider the intent of the
code.  The main program consists of three lines of code.  They are (in order):

```python
balance = 10000
withdraw(1000)
print(balance)
```

After we have defined `balance`, we define a function named `withdraw` that can
be used to subtract an amount of money from `balance`, but only if there is
sufficient money available in `balance`.

Since `balance` is not defined in the body of any function, it is known as a
*global variable*.  Global variables are accessible anywhere in the program,
including inside functions.  Consider the following code.

```python
gl = 7

def f(x):
    return x + gl

print(f(3))
```

As we would expect, this code prints `10`.

Although global variables are accessible (i.e., they may be "read") from within
functions, they cannot be modified from within a function unless we explicitly
tell Python that's what we intend to do.  Do you remember a little bit ago when
I said that if function could mess with your variables without you being aware
of it, then your program could have unintended side effects, and that side
effects are bad?  Well, here we are again.  If you ran the code in
Listing~\ref{code:global_bogus}, you would see this:

```console
Traceback (most recent call last):
  File "variable_scope.py", line 38, in <module>
    withdraw(1000)
  File "variable_scope.py", line 35, in withdraw
    if balance >= amount:
UnboundLocalError: local variable 'balance' referenced before assignment
```

Python assumes that any variable you wish to *write* to inside a function is a
local variable, even if there is a global variable of the same name.  Python
does allow us to write to global variables, but we have to tell Python that we
intend to do so and that we know the potential consequences!  We can use the
*global* statement to allow a function to write to a global variable; see
Listing~\ref{code:global_good}.

\begin{codelisting}
\label{code:global_good}
\codecaption{}
```python, options: "linenos": true, "hl_lines": [4]
balance = 10000

def withdraw(amount):
    global balance
    if balance >= amount:
        balance =  balance - amount

withdraw(1000)
print(balance)
```
\end{codelisting}

The output of Listing~\ref{code:global_good} is now `9000`, as we would expect.

`global` should be used sparingly.  It is generally better to pass values to
functions rather than storing those values in global variables, though in some
cases we will manage common information in global variables, especially when we
program video games.  Stay tuned!

## Exercises
\label{sec:funcs_exercises}

1. Determine the output of the following code.

    <<(exercises/ch4/p4.1.py)

2. Determine the output of the following code.

    <<(exercises/ch4/p4.2.py)

3. Determine the output of the following code.

    <<(exercises/ch4/p4.3.py)

4. Determine the output of the following code.

    <<(exercises/ch4/p4.4.py)

5. Determine the output of the following code.

    <<(exercises/ch4/p4.5.py)

6. Define a function named `circum` that takes the radius of a circle as a
parameter and returns the circumference of that circle.

7. Define a function named `smallest` that takes three float parameters and
returns the smallest value of the three.

8. Define a function named `find_vowel` that takes a string as a parameter and
returns the index of the first vowel in the string.

9. Define a function named `count_words` that takes a string as a parameter and
returns the number of words in the string (where words are separated by a
single space).
