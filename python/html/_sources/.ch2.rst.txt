



Instead of

```python
age == 14 or 15
```

a programmer should write

```python
age == 14 or age == 15
```

Bottom line: be very careful when using and/or.

## Exercises
\label{sec:cond_exercises}

1. Suppose `x` is an integer variable.  What is the difference between the
expression `x = 2` and the expression `x == 2`?

2. Given the following code:

    <<(exercises/ch2/p2.2.1.py)

    What is the type and value of each of the following expressions?

    <<(exercises/ch2/p2.2.2.py)

3. Identify the error in the following code.

    <<(exercises/ch2/p2.3.py)

4. Identify the error in the following code.

    <<(exercises/ch2/p2.4.py)

5. What is the output of the following code?

    <<(exercises/ch2/p2.5.py)

6. Consider the following code.

    <<(exercises/ch2/p2.6.1.py)

    What is the output of the program if \kode{a} and \kode{b} were given the following values prior to the start of the code?

    <<(exercises/ch2/p2.6.2.py)

7. What is the output of the following code?

    <<(exercises/ch2/p2.7.py)

8. Write code that rounds a float number up or down *without* using the \kode{round} function introduced in Section~\ref{sec:handy_funcs}.  That is, write code that asks for a number, and then it takes that number and rounds it up or down appropriately without using \kode{round}.  For example, if the user types `3.6`, the program should output a `4` since the fractional part `.6` is greater than `.5`.  The user were to type `3.2`, the program should output a `3` since the fractional part `.2` is less than `.5`.

    It may help to know that if you use the `int` function to cast a float to an integer, the fractional part disappears.  This is called *truncation*.  For example, in the following code

    <<(exercises/ch2/p2.8.py)

    the value of \kode{i} ends up being `3`.
